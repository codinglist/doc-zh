<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: Luffy, mowangjuanzi -->
<refentry xml:id="function.explode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>explode</refname>
  <refpurpose>使用一个字符串分割另一个字符串</refpurpose> 
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>explode</methodname>
   <methodparam><type>string</type><parameter>separator</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer><constant>PHP_INT_MAX</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   此函数返回由字符串组成的数组，每个元素都是
   <parameter>string</parameter>
   的一个子串，它们被字符串
   <parameter>separator</parameter>
   作为边界点分割出来。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>separator</parameter></term>
     <listitem>
      <para>
       边界上的分隔字符。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       输入的字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       如果设置了
   <parameter>limit</parameter>
   参数并且是正数，则返回的数组包含最多
   <parameter>limit</parameter>
   个元素，而最后那个元素将包含
   <parameter>string</parameter>
   的剩余部分。
      </para>
      <para>
       如果
  <parameter>limit</parameter>
  参数是负数，则返回除了最后的
  -<parameter>limit</parameter>
  个元素外的所有元素。
      </para>
      <para>
       如果 <parameter>limit</parameter> 是 0，则会被当做 1。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <note>
   <para>
    在 PHP 8.0 之前，<function>implode</function> 可以接收两种参数顺序。
    但请注意，<function>explode</function> 从未支持乱序传入参数：你必须保证
    <parameter>separator</parameter> 参数在
    <parameter>string</parameter> 参数之前。
   </para>
  </note>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   此函数返回由字符串组成的 <type>array</type>，每个元素都是
   <parameter>string</parameter>
   的一个子串，它们被字符串
   <parameter>separator</parameter>
   作为边界点分割出来。
  </para>
  <para>
   如果 <parameter>separator</parameter>
   为空字符串（""），<function>explode</function>
   将抛出 <classname>ValueError</classname>。
   如果
   <parameter>separator</parameter>
   所包含的值在
   <parameter>string</parameter>
   中找不到，并且使用了负数的 <parameter>limit</parameter> ，
   那么会返回空的 <type>array</type>，
   否则返回包含 <parameter>string</parameter>
   单个元素的数组。
   如果 <parameter>separator</parameter> 值出现在了
   <parameter>string</parameter> 参数的开头或末尾，
   将在返回 <type>array</type> 相应的头部或尾部添加 <type>array</type> 空值。
  </para>
 </refsect1>

 <refsect1 role=" changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       现在开始，当 <parameter>separator</parameter> 参数传入空字符串时（<literal>""</literal>），
       <function>explode</function> 会抛出 <classname>ValueError</classname>。
       在早期版本中，<function>explode</function> 会返回 &false;。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>explode</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
// 示例 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0], PHP_EOL; // piece1
echo $pieces[1], PHP_EOL; // piece2

// 示例 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user, PHP_EOL; // foo
echo $pass, PHP_EOL; // *

?>
]]>
    </programlisting>
   </example>
  </para>
    <para>
   <example>
    <title><function>explode</function> return examples</title>
    <programlisting role="php">
<![CDATA[
<?php
/*
  字符串内不包含分隔字符时，
  会简单返回只有一个原始字符串元素的 array。
*/
$input1 = "hello";
$input2 = "hello,there";
$input3 = ',';
var_dump( explode( ',', $input1 ) );
var_dump( explode( ',', $input2 ) );
var_dump( explode( ',', $input3 ) );

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1)
(
    [0] => string(5) "hello"
)
array(2)
(
    [0] => string(5) "hello"
    [1] => string(5) "there"
)
array(2)
(
    [0] => string(0) ""
    [1] => string(0) ""
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><parameter>limit</parameter> 参数的例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'one|two|three|four';

// 正数的 limit
print_r(explode('|', $str, 2));

// 负数的 limit
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>str_split</function></member>
    <member><function>mb_split</function></member>
    <member><function>str_word_count</function></member>
    <member><function>strtok</function></member>
    <member><function>implode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b6c220c748034c8db2d007ef42b74b212ac2f1cd Maintainer: mowangjuanzi Status: ready -->
<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist> 

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>
    开启或关闭负载压缩。开启后，item 值的长度超过特定阈值（当前是 2000 字节）时，会对值压缩并存储，在检索时会以透明方式解压缩。可以使用
    <link linkend="ini.memcached.compression-threshold">memcached.compression_threshold</link> INI 配置来设置阈值。
    </para>
    <para>类型：<type>bool</type>，默认：&true;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-type">
   <term><constant>Memcached::OPT_COMPRESSION_TYPE</constant></term>
   <listitem>
    <simpara>
     如果启用了压缩，则指定要使用的压缩算法。有效的算法包括
     <constant>Memcached::COMPRESSION_FASTLZ</constant>、<constant>Memcached::COMPRESSION_ZLIB</constant> 和
     <constant>Memcached::COMPRESSION_ZSTD</constant>。
    </simpara>
    <para>类型：<type>int</type>，默认：<constant>Memcached::COMPRESSION_FASTLZ</constant>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-fastlz">
   <term><constant>Memcached::COMPRESSION_FASTLZ</constant></term>
   <listitem>
    <simpara>
     FASTLZ 压缩算法。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zlib">
   <term><constant>Memcached::COMPRESSION_ZLIB</constant></term>
   <listitem>
    <simpara>ZLIB 压缩算法。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zstd">
   <term><constant>Memcached::COMPRESSION_ZSTD</constant></term>
   <listitem>
    <simpara>
     ZSTD 压缩算法。
    </simpara>
    <simpara>
     自 Memcached 3.3.0 起可用。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-level">
   <term><constant>Memcached::OPT_COMPRESSION_LEVEL</constant></term>
   <listitem>
    <simpara>
     如果启用了压缩，则指定要使用的压缩级别。
    </simpara>
    <simplelist>
     <member><constant>Memcached::COMPRESSION_FASTLZ</constant> 不支持压缩级别。</member>
     <member><constant>Memcached::COMPRESSION_ZSTD</constant>：最低级别为 <literal>-22</literal>，最高级别为 <literal>22</literal>。</member>
     <member><constant>Memcached::COMPRESSION_ZLIB</constant>：最低级别为 <literal>0</literal>，最高级别为 <literal>9</literal>。</member>
    </simplelist>
    <para>类型：<type>int</type>，默认：<literal>3</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <simpara>
     指定对于非标量值进行序列化的序列化工具。可用的值有
     <constant>Memcached::SERIALIZER_PHP</constant>、<constant>Memcached::SERIALIZER_IGBINARY</constant>、<constant>Memcached::SERIALIZER_JSON</constant>、<constant>Memcached::SERIALIZER_JSON_ARRAY</constant>
     和 <constant>Memcached::SERIALIZER_MSGPACK</constant>。
    </simpara>
    <para>
     类型：<type>int</type>，默认：优先 <constant>Memcached::SERIALIZER_IGBINARY</constant>（如果有效），其次
     <constant>Memcached::SERIALIZER_MSGPACK</constant>（如果有效），最后 <constant>Memcached::SERIALIZER_PHP</constant>。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>默认的 PHP 序列化工具（即 serialize 方法）。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <simpara>
     <link linkend="book.igbinary">igbinary</link> 序列化工具。它将 php 的数据结构
     存储为紧密的二进制形式，而非文本表示，从而节省时间和空间。
    </simpara>
    <simpara>
     仅当 memcached 配置了 <option>--enable-memcached-igbinary</option> 选项并加载了
     <link linkend="intro.igbinary">igbinary</link> 扩展时，才支持此序列化器。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>JSON 序列化器。此序列化器将 JSON 反序列化为对象。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json-array">
   <term><constant>Memcached::SERIALIZER_JSON_ARRAY</constant></term>
   <listitem>
    <simpara>
     JSON 数组序列化器。此序列化器将 JSON 反序列化为关联数组
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-msgpack">
   <term><constant>Memcached::SERIALIZER_MSGPACK</constant></term>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl.package;msgpack">MessagePack</link> 序列化器。
    </simpara>
    <simpara>
     仅当 memcached 配置了 <option>--enable-memcached-msgpack</option> 选项并加载了 <literal>msgpack</literal> 扩展时，才支持此序列化器。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <simpara>
     可以用于为 key 创建“域”。这个值将会被作为每个 key 的前缀，它不能长于 <literal>128</literal> 个字符，
     并且将会缩短最大可允许的 key 的长度。这个前缀仅仅用于被存储的元素的 key，而不会用于服务器 key。
    </simpara>
    <para>类型：<type>string</type>，默认：<literal>""</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <simpara>
     指定存储元素 key 使用的散列算法。可用的值通过 <constant>Memcached::HASH_<replaceable>*</replaceable></constant>
     常量提供。每种散列算法均有其优缺点。若无特定需求或不了解差异，建议使用默认值。
    </simpara>
    <para>类型：<type>int</type>，默认：<constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>默认的（Jenkins one-at-a-time）元素 key hash 算法</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>md5 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>CRC 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>FNV1_64 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>FNV1_64A 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>FNV1_32 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>FNV1_32A 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Hsieh 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Murmur 元素 key hash 算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <simpara>
     指定元素 key 分布到各个服务器的方法。当前支持的方法有余数分步法合一致性 hash 算法两种。一致性 hash 算法提供
     了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。
    </simpara>
    <para>类型：<type>int</type>，默认:：<constant>Memcached::DISTRIBUTION_MODULA</constant>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>余数分布算法。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>一致性分布算法（基于 libketama）。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-virtual-bucket">
   <term><constant>Memcached::DISTRIBUTION_VIRTUAL_BUCKET</constant></term>
   <listitem>
    <simpara>
     虚拟桶（bucket）散列 key 分布算法（也称为 vbucket）。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>
     开启或关闭兼容的 libketama 类行为。当开启此选项后，元素 key 的 hash 算法将会被设置为 md5 并且分布算法将会
     采用带有权重的一致性 hash 分布。这一点非常有用因为其他基于 libketama 的客户端（比如 Python、Ruby 等）在同样
     的服务端配置下可以透明的访问 key。
    </para>
    <note>
     <para>
      如果要使用一致性 hash 算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。
     </para>
    </note>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-hash">
   <term><constant>Memcached::OPT_LIBKETAMA_HASH</constant></term>
   <listitem>
    <simpara>
     指定用于主机映射的散列算法。
    </simpara>
    <para>类型：<type>int</type>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-keepalive">
   <term><constant>Memcached::OPT_TCP_KEEPALIVE</constant></term>
   <listitem>
    <simpara>
     启用 TCP 保活（keep alive）。
    </simpara>
    <para>类型：<type>bool</type>，默认:：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <simpara>
     开启或关闭 I/O 缓存。开启 I/O 缓存会导致存储命令不实际发送而是存储到缓冲区中。任意的检索数据操作都会导致
     缓存中的数据被发送到远程服务端。退出连接或关闭连接也会导致缓存数据被发送到远程服务端。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <simpara>
     开启使用二进制协议。请注意这个选项不能在一个打开的连接上进行切换。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <simpara>
     开启或关闭异步 I/O。这将使得存储函数传输速度最大化。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-noreply">
   <term><constant>Memcached::OPT_NOREPLY</constant></term>
   <listitem>
    <simpara>
     启用或禁用忽略存储命令（set、add、replace、append、prepend、delete、increment、decrement
     等）的结果。存储命令将直接发送而无需等待响应（也不会返回响应）。检索命令（如
     <methodname>Memcached::get</methodname>）不受此设置影响。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>
     启用或禁用连接套接字的无延迟特性（在某些环境中可能提升速度）。
    </para>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <simpara>socket 发送缓冲的最大值。</simpara>
    <para>类型：<type>int</type>，默认：根据不同的平台/内核配置不同</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <simpara>socket 接收缓冲的最大值。</simpara>
    <para>类型：<type>int</type>，默认：根据不同的平台/内核配置不同</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <simpara>在非阻塞模式下，设置套接字连接期间的超时值，单位是毫秒。</simpara>
    <para>类型：<type>int</type>，默认：<literal>1000</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <simpara>
    等待失败的连接重试的时间，单位秒。
    </simpara>
    <para>类型：<type>int</type>，默认：<literal>2</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-dead-timeout">
   <term><constant>Memcached::OPT_DEAD_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     等待重试失效服务器的时间，单位为秒。<literal>0</literal> 表示不重试。
    </simpara>
    <para>类型：<type>int</type>，默认：<literal>0</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <simpara>socket 发送超时时间，单位微秒。在这种情况下您不能使用非阻塞 I/O，这将使得您仍然有数据会发送超时。</simpara>
    <para>类型：<type>int</type>，默认：<literal>0</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <simpara>socket 读取超时时间，单位微秒。在这种情况下您不能使用非阻塞 I/O，这将使得您仍然有数据会读取超时。</simpara>
    <para>类型：<type>int</type>，默认：<literal>0</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <simpara>poll 连接超时时间，单位毫秒。</simpara>
    <para>类型：<type>int</type>，默认：<literal>1000</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <simpara>开启或禁用 DNS 查找缓存。</simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <simpara>指定一个服务器连接的失败重试次数限制。在达到此数量的失败重连后此服务器将被从服务器池中移除。</simpara>
    <para>类型：<type>int</type>，默认：<literal>5</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-timeout-limit">
   <term><constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant></term>
   <listitem>
    <simpara>
     指定服务器连接尝试的超时限制。当连续连接超时次数达到此值后，将移除此服务器。
    </simpara>
    <para>类型：<type>int</type>，默认：<literal>0</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-auto-eject-hosts">
   <term><constant>Memcached::OPT_AUTO_EJECT_HOSTS</constant></term>
   <listitem>
    <para>
     从列表中移除已禁用的服务器。需与 <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant>
     和 <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant> 配合使用。
    </para>
    <note>
     <para>
      <constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant> 已取代此选项。
     </para>
    </note>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-verify-key">
   <term><constant>Memcached::OPT_VERIFY_KEY</constant></term>
   <listitem>
    <simpara>
     启用 memcached 对 key 的验证。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-use-udp">
   <term><constant>Memcached::OPT_USE_UDP</constant></term>
   <listitem>
    <simpara>
     使用 UDP 而非 TCP。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-number-of-replicas">
   <term><constant>Memcached::OPT_NUMBER_OF_REPLICAS</constant></term>
   <listitem>
    <simpara>
     在不同服务器上存储每个元素的指定数量的副本。
    </simpara>
    <para>类型：<type>int</type>，默认：<literal>0</literal>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-randomize-replica-reads">
   <term><constant>Memcached::OPT_RANDOMIZE_REPLICA_READS</constant></term>
   <listitem>
    <simpara>
     对副本读取服务器进行随机化。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-remove-failed-servers">
   <term><constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant></term>
   <listitem>
    <simpara>
     从列表中移除已禁用的服务器。需与 <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant>
     和 <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant> 配合使用。
    </simpara>
    <para>类型：<type>bool</type>，默认：&false;。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <simpara>指示是否支持 igbinary 的序列化。</simpara>
    <para>类型：<type>bool</type>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <simpara>指示是否支持 json 的序列化。</simpara>
    <para>类型：<type>bool</type>。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <simpara>表示 MessagePack 序列化支持是否有效。</simpara>
    <para>类型：<type>bool</type>。</para>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-zstd">
   <term><constant>Memcached::HAVE_ZSTD</constant></term>
   <listitem>
    <simpara>表示是否支持 ZSTD 压缩。</simpara>
    <para>类型：<type>bool</type>。</para>
    <para>自 Memcached 3.3.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-encoding">
   <term><constant>Memcached::HAVE_ENCODING</constant></term>
   <listitem>
    <simpara>
     表示是否支持使用 <methodname>Memcached::setEncodingKey</methodname> 进行数据加密。
    </simpara>
    <para>类型：<type>bool</type>。</para>
    <para>自 Memcached 3.1.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>类型：<type>bool</type>。</para>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>类型：<type>bool</type>。</para>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>
     <methodname>Memcached::get</methodname>、<methodname>Memcached::getMulti</methodname> 和
     <methodname>Memcached::getMultiByKey</methodname> 的 flag，确保返回 CAS 令牌值。
    </para>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>
     用于 <methodname>Memcached::getMulti</methodname> 和 <methodname>Memcached::getMultiByKey</methodname>
     的 flag 用以确保返回的 key 和请求的 key 顺序保持一致。不存在的 key 将会得到默认值 &null;。
     </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>操作成功。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>某种方式的操作失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>DNS 查找失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>读取网络数据失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>错误的 memcached 协议命令。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>客户端错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>服务端错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>向网络写数据失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>比较并交换值操作失败（cas 方法）：尝试向服务端存储数据时由于自此连接最后一次取此 key 对应数据之后被改变导致失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>
     元素未存储，但并非由于错误。这通常表明“add”（元素已存在）或“replace”（元素不存在）命令的条件不满足或者该元素位于删除序列中（延时删除）。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>
     元素未找到（通过“get”或“cas”操作时）。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>局部网络数据读错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>在多 key 获取的时候发生错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>服务器池空。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>结果集到结尾了。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>系统错误。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>操作被缓存。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>操作超时。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>提供了无效的 key。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stored">
   <term><constant>Memcached::RES_STORED</constant></term>
   <listitem>
    <simpara>元素已存储。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-deleted">
   <term><constant>Memcached::RES_DELETED</constant></term>
   <listitem>
    <simpara>元素已删除。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stat">
   <term><constant>Memcached::RES_STAT</constant></term>
   <listitem>
    <simpara>统计数据。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-item">
   <term><constant>Memcached::RES_ITEM</constant></term>
   <listitem>
    <simpara>元素。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-not-supported">
   <term><constant>Memcached::RES_NOT_SUPPORTED</constant></term>
   <listitem>
    <simpara>不支持。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-fetch-notfinished">
   <term><constant>Memcached::RES_FETCH_NOTFINISHED</constant></term>
   <listitem>
    <simpara>获取尚未完成。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-marked-dead">
   <term><constant>Memcached::RES_SERVER_MARKED_DEAD</constant></term>
   <listitem>
    <simpara>服务器标记为失效</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-stat-key">
   <term><constant>Memcached::RES_UNKNOWN_STAT_KEY</constant></term>
   <listitem>
    <simpara>未知统计 key。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-invalid-host-protocol">
   <term><constant>Memcached::RES_INVALID_HOST_PROTOCOL</constant></term>
   <listitem>
    <simpara>主机协议无效。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-memory-allocation-failure">
   <term><constant>Memcached::RES_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <simpara>内存分配失败。</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>创建网络 socket 失败。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>不能压缩/解压缩或序列化/反序列化值。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>自 Memcached 3.0.0 起可用。</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

